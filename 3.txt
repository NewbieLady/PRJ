Fill in the blank with the correct code to create an object of type Student named Toni, using default values. 1 2 3 4 5 6 7 8 9 10 11 12 class Student{ int rollNo; int age; String name; String subject; } public class ModuleQuiz_M3L3 { public static void main(String []args) { Student Toni = ----------- } }|new Student();
In the code block, which of the following statements about the add methods in the Calculator class are true? Select all that apply. 4 5 6 7 8 9 10 return number1 + number2; } double add(double number1, double number2) { return number1 + number2; } }|The two add methods have different signatures.$The two add methods are examples of method overloading.
Given the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Vehicle { String typeOfVehicle = "vehicle"; void printType() { System.out.println("This is a " + typeOfVehicle); } } class Car extends Vehicle { String typeOfVehicle = "car"; @Override void printType() { System.out.println("A " + typeOfVehicle + " is a " + ------); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Car carObject = new Car(); carObject.printType(); } } What should replace ------ to correctly display "A car is a vehicle" using the typeOfVehicle property from the Vehicle class?|super.typeOfVehicle
Given the following code: 1 2 3 4 5 6 7 8 9 class Parent { protected String protectedField; private String privateField; public String publicField; } class Child extends Parent { // code of class Child } What are the properties that the class Child can access directly?|Protected field and publicField.
In the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Animal { void whatAmI() { System.out.println("I am an animal."); } } class Duck extends Animal { @Override void whatAmI() { System.out.println("I am a Duck"); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Animal animalObject = -------; animalObject.whatAmI(); } } What should replace ------- to display "I am a duck"?|new Duck()
What is displayed when you run the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 interface Moveable { void move(); } class Bike implements Moveable { public void move() { System.out.println("Bike is am moving."); } public void stop() { System.out.println("Bike has stopped."); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Moveable moveableObject = new Bike(); moveableObject.stop(); } }|A compilation error.
Given the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 interface Steerable { void steer(); } abstract class Vehicle { abstract void start(); void stop() { System.out.println("The vehicle stopped."); } } class Boat extends Vehicle implements Steerable { public void ------ { System.out.println("Boat has started."); } public void ----- { System.out.println("Boat is steering."); } } What methods should replace ----- to correctly implement the required methods?|start(), steer()
In a college, a student is enrolled in multiple subjects. The structure of the class is: 1 2 3 4 5 6 class Student{ int rollNo; int age; String name; String subject; } If Toni is a student object, which of the following describes Toni?|An instance of the Student class.
True or False: The following two methods have the same signature: 1 2 int add(int number1, int number2) float add(int number1, int number2)|True
Given the following classes: 1 2 3 4 5 6 7 8 9 10 11 class Student{ int rollNo; int age; String name; String subject; } class Trainee ------ Student { int stipend; } The class Trainee is a specialized version of the Student class that also includes a stipend. What keyword should replace ------ to establish an inheritance relationship between the Trainee class and the Student class?|extends
Given the following code: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void printType() { System.out.println("This is a " + typeOfVehicle); } } class Car extends Vehicle { String typeOfVehicle = "car"; @Override void printType() { System.out.println("A " + typeOfVehicle + " is a " + ------); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Car carObject = new Car(); carObject.printType(); } } What should replace ------ to correctly display "A car is a vehicle" using the typeOfVehicle property from the Vehicle class?|super.typeOfVehicle
Select all that apply. Which of the following statements are true about access modifiers in Java inheritance?|A protected member of a superclass can be accessed directly by the subclass.$A private member of a superclass cannot be accessed directly by the subclass.
Given the following code: 1 2 3 4 5 6 7 8 9 10 11 class Animal { void whatAmI() { System.out.println("I am an animal."); } } class Duck extends Animal { void whatAmI(String name) { System.out.println("I am a Duck"); } } What is the method whatAmI() in the class Duck an example of?|A new method of the Duck class.
What is displayed when you run the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 abstract class Animal { void sleep() { System.out.println("Animal is sleeping."); } void whatAmI() { System.out.println("I am an animal."); } } class Duck extends Animal { @Override void whatAmI() { System.out.println("I am a Duck."); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Animal animalObject = new Animal(); animalObject.whatAmI(); animalObject.sleep(); } }|It gives a compile time error.
What is displayed when you run the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 interface Moveable { void move(); } class Bike implements Moveable { public void move() { System.out.println("Bike is am moving."); } public void stop() { System.out.println("Bike has stopped."); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Moveable moveableObject = new Bike(); moveableObject.stop(); } }|A compilation error.
Which of the following statements about interfaces and multiple inheritance are correct? Select all that apply.|Interfaces can extend other interfaces.$A class can implement multiple interfaces in Java.
Given the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 interface Steerable { void steer(); } abstract class Vehicle { abstract void start(); void stop() { System.out.println("The vehicle stopped."); } } class Boat extends Vehicle implements Steerable { public void ------ { System.out.println("Boat has started."); } public void ----- { System.out.println("Boat is steering."); } } What methods should replace ----- to correctly implement the required methods?|start(), steer()
True or False: A class is represented by a real-world object like Toni, and an object is used as a blueprint for creating classes.|False
True or False: A class can implement multiple interfaces in Java.|True
Which of the following statements are true? Select all that apply.|A subclass can inherit methods from an abstract class, and an object of the subclass can access all the methods defined in the abstract class and implemented interfaces.
What is displayed when you run the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 interface Moveable { void move(); } class Bike implements Moveable { public void move() { System.out.println("Bike is moving."); } public void stop() { System.out.println("Bike has stopped."); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Moveable moveableObject = new Bike(); moveableObject.stop(); } }|A compilation error.
Given the following code: 1 2 3 4 5 6 7 8 9 10 abstract class Animal { abstract void sleep(); } class Swan extends Animal { -----(){ System.out.println("Swan is sleeping"); } } What should replace ----- to correctly override the sleep() method from the parent Animal class in the class Swan?|void sleep
Which of the following statements about method overriding are true? Select all that apply.|The return type of the overridden method must also be the same as that of the method in the superclass.$The overridden method in the subclass must have the same name and signature as that of the superclass.$The access level of the access modifier can be equal to or less restrictive than that of the parent class.
What is the output of the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Calculator{ int calc(int number1, int number2) { return number1 + number2; } double calc(double number1, double number2) { return number1 * number2; } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Calculator calcObject = new Calculator(); System.out.println( calcObject.calc(2, 1) ); } }|3
Select the output of the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Vehicle { String typeOfVehicle = "vehicle"; void printType() { System.out.println("This is a " + typeOfVehicle); } } class Car extends Vehicle { String typeOfVehicle; @Override void printType() { super.printType(); System.out.println("A car is a vehicle."); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Car carObject = new Car(); carObject.printType(); } }|The output is both "This is a vehicle" and "A car is a vehicle".
In the code block, which of the following statements about the add methods in the Calculator class are true? Select all that apply. 1 2 3 4 5 6 7 8 9 10 class Calculator{ int add(int number1, int number2) { return number1 + number2; } double add(double number1, double number2) { return number1 + number2; } }|The two add methods are examples of method overloading.$The two add methods have different signatures.
True or False: An object of Student class can be assigned to an object of a Trainee class.|False
Given the following code: 1 2 3 4 5 6 7 8 9 10 abstract class Animal { abstract void sleep(); } class Swan extends Animal { -----(){ System.out.println("Swan is sleeping"); } } What should replace ----- to correctly override the sleep() method from the parent Animal class in the class Swan?|void sleep
What is displayed when you run the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 interface Moveable { void move(); } class Bike implements Moveable { public void move() { System.out.println("Bike is moving."); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { Moveable moveableObject = new Bike(); moveableObject.move(); } }|Bike is moving.
What is displayed when you run the following code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 interface Flyable { void fly(); } interface Swimmable { void swim(); } interface Walkable { void walk(); } class HybridDog implements Flyable, Swimmable, Walkable { @Override public void fly() { System.out.println("HybridDog is flying."); } @Override public void swim() { System.out.println("HybridDog is swimming."); } @Override public void walk() { System.out.println("HybridDog is walking."); } } public class ModuleQuiz_M3L3 { public static void main(String []args) { HybridDog hybridDogObject = new HybridDog(); hybridDogObject.fly(); hybridDogObject.walk(); hybridDogObject.swim(); } }|1 2 3 4 HybridDog is flying. HybridDog is swimming. HybridDog is walking.
In a college, a student is enrolled in multiple subjects. The structure of the class is: 1 2 3 4 5 6 class Student{ int rollNo; int age; String name; String subject; } If Toni is a student object, which of the following describes Toni?|An instance of the Student class.
