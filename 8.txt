You are developing a software system for a geometry application. You decide to use an abstract class Shape that will be extended by Rectangle and Triangle. The Shape class should include an abstract method calculateArea(). Which of the given options is correct about the following design? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 abstract class Shape { abstract double calculateArea(); } class Rectangle extends Shape { private double width; private double height; Rectangle(double width, double height) { this.width = width; this.height = height; } @Override double calculateArea() { return width * height; } } class Triangle extends Shape { private double base; private double height; Triangle(double base, double height) { this.base = base; this.height = height; } @Override double calculateArea() { return 0.5 * base * height; } }|The design correctly uses an abstract class and method implementation.
You are tasked with developing a notification system for an application. Different types of notifications, such as email, SMS, and push must implement a Notification interface, as demonstrated by this design: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 interface Notification { void sendNotification(String message); } class EmailNotification implements Notification { @Override public void sendNotification(String message) { // Logic to send email notification } } class SMSNotification implements Notification { @Override public void sendNotification(String message) { // Logic to send SMS notification } } class PushNotification implements Notification { @Override public void sendNotification(String message) { // Logic to send push notification } } Which of the following statements about the given design is correct?|The design correctly uses the Notification interface to handle different types of notifications.
In object-oriented design, which of the following best describes an "is-a" relationship?|A class inherits from another class.
You are developing a file processing system that reads from a file and processes the data. There is a risk of the file not being found or the data being invalid. Examine the following code snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class FileProcessor { public static void main(String[] args) { try { BufferedReader reader = new BufferedReader(new FileReader("data.txt")); String line; while ((line = reader.readLine()) != null) { processLine(line); } reader.close(); } catch (FileNotFoundException e) { System.out.println("File not found: " + e.getMessage()); } catch (IOException e) { System.out.println("Error reading file: " + e.getMessage()); } } private static void processLine(String line) { // Process the line } } Which of the following is correct about the given code snippet?|This code correctly handles potential file-related exceptions.
You are developing an application that processes customer orders. Sometimes, the orders contain invalid data (for example, negative quantities or missing customer information). Below is a code snippet for processing an order. 1 2 3 4 5 6 7 8 9 10 11 12 13 public class OrderProcessing { public static void main(String[] args) { int quantity = -5; String customerName = ""; // TODO: Validate the data and handle any exceptions that may occur processOrder(quantity, customerName); } private static void processOrder(int quantity, String customerName) { // Process the order } } What approach should you take to handle potential issues with invalid data?|Combine validation and exception handling to ensure robust processing: 1 2 3 4 5 6 7 8 if (quantity <= 0 || customerName == null || customerName.isEmpty()) { throw new IllegalArgumentException("Invalid order data"); } try { processOrder(quantity, customerName); } catch (Exception e) { System.out.println("An unexpected error occurred: " + e.getMessage()); }
You are developing a software system for a construction company. You decide to use an abstract class Building that will be extended by House and Skyscraper. The Building class should include an abstract method calculateArea(). Which of the following design approaches is correct?|Define Building as an abstract class and declare calculateArea() as an abstract method, ensuring House and Skyscraper override calculateArea(): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 abstract class Building { abstract double calculateArea(); } class House extends Building { @Override double calculateArea() { // method body } } class Skyscraper extends Building { @Override double calculateArea() { // method body } }
Which Java class is commonly used to read character data from a text file?|FileReader
Complete the code snippet below to properly write data to a file using FileWriter and PrintWriter: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import java.io.*; public class FileWriteExample { public static void main(String[] args) { try { FileWriter fileWriter = new FileWriter("output.txt"); PrintWriter writer = new PrintWriter(fileWriter); // Complete the code writer.close(); } catch (IOException e) { e.printStackTrace(); } } }|writer.println("Hello, World!");
Which of the following statements about byte streams and/or character streams in Java is correct?|Byte streams are used for binary data, while character streams are used for text-based data.
Which of the following exceptions is a checked exception in Java?|IOException
Complete the code to create a new directory named "NewFolder" using the File class: 1 2 3 4 5 6 7 8 9 import java.io.File; public class DirectoryExample { public static void main(String[] args) { File dir = new File("NewFolder"); // Complete the code } }|dir.mkdir();
Which method from the File class is used to rename a file in Java?|renameTo()
Which of the following is the correct way to open a file in append mode using FileWriter in Java?|new FileWriter("filename.txt", true)
You are developing a file management tool that needs to display all files and directories in a specific folder. The tool should only list files that are not hidden. Which approach would you take?|Use the listFiles() method and manually check each file to see if it is hidden: 1 2 3 4 5 6 7 8 9 10 File directory = new File("myDirectory"); File[] files = directory.listFiles(); if (files != null) { for (File file : files) { if (!file.isHidden()) { System.out.println(file.getName()); } } }
You are developing a simple game where you need to save the player's score to a file so that it can be loaded the next time the game is played. Which approach would you use to save and load the player's score?|Save the score to a text file and read it back as a string: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int score = 42; // Saving the score try (FileWriter writer = new FileWriter("score.txt")) { writer.write(Integer.toString(score)); } catch (IOException e) { e.printStackTrace(); } // Loading the score try (BufferedReader reader = new BufferedReader(new FileReader("score.txt"))) { int loadedScore = Integer.parseInt(reader.readLine()); } catch (IOException e) { e.printStackTrace(); }
The following code is intended to print the length of the String data. However, it will cause an exception at runtime. What is the issue, and how can it be resolved? 1 2 3 4 5 6 public class ExceptionExample { public static void main(String[] args) { String data = null; System.out.println(data.length()); } }|The code will throw a NullPointerException because the data is null. Add a null check before accessing data.length().
Which of the following best describes unchecked exceptions in Java?|They are not checked at compile-time.
You are tasked with developing a log processing system that reads log files and processes each line. The system should use BufferedReader to read from a log file stored as a text file and print each line. Which of the following design approaches is correct?|Use BufferedReader to read each line, checking for null values: 1 2 3 4 5 6 7 8 9 10 11 12 try { FileReader fileReader = new FileReader("logs.txt"); BufferedReader reader = new BufferedReader(fileReader); String line; while ((line = reader.readLine()) != null) { System.out.println(line); } reader.close(); } catch (IOException e) { e.printStackTrace(); }
You are developing a program to process image files stored in binary format. The program needs to read and process the binary data. Which of the following design approaches correctly implements this requirement?|Use FileInputStream to read the binary data: 1 2 3 4 5 6 7 8 9 10 11 try { FileInputStream fis = new FileInputStream("image.dat"); int byteData; while ((byteData = fis.read()) != -1) { // Process each byte of data } fis.close(); } catch (IOException e) { e.printStackTrace(); }
Complete the code to rename a file using the File class in Java: 1 2 3 4 5 6 7 8 9 10 import java.io.File; public class RenameFileExample { public static void main(String[] args) { File oldFile = new File("oldname.txt"); File newFile = new File("newname.txt"); // Complete the code to rename the file } }|oldFile.renameTo(newFile);
You are developing a logging system for an application that needs to append log entries to a text file every time an event occurs. Which approach is the most appropriate for this task?|Use FileWriter in append mode to add each log entry to the file: 1 2 3 4 5 6 try (FileWriter writer = new FileWriter("logs.txt", true)) { writer.write("Log entry at " + new java.util.Date() + "\n"); } catch (IOException e) { e.printStackTrace(); }
Which of the following best describes the purpose of interfaces in Java?|To provide a way to implement multiple behaviors.
Which of the following is true about abstract methods in Java?|Abstract methods must be declared in an abstract class.
You are tasked with developing a system that logs server status updates to a text file. The system should efficiently append each update to the file on a new line without overwriting previous entries. Which of the following approaches correctly implements this requirement using BufferedWriter and FileWriter?|Use BufferedWriter with FileWriter in append mode to add each update: 1 2 3 4 5 FileWriter fileWriter = new FileWriter("serve.log", true); BufferedWriter writer = new BufferedWriter(fileWriter); writer.write("Server status: OK at " + new java.util.Date()); writer.newLine(); writer.close();
You are developing an application that reads customer data from a file. There is a risk that the file may not exist. How should you handle this checked exception to ensure the program can handle this situation gracefully?|Use a try-catch block to handle FileNotFoundException and notify the user.
You are developing an application that needs to organize files into directories based on their type (for example, images and documents). Which of the following approaches is correct for creating these directories?|Use the mkdir() method to create a directory for each file type: 1 2 3 4 5 6 7 8 9 10 11 File imagesDir = new File("Images"); File docsDir = new File("Documents"); if (!imagesDir.exists()) { imagesDir.mkdir(); } if (!docsDir.exists()) { docsDir.mkdir(); }
You are developing a system that processes user-uploaded files. If a user uploads a file with the same name as an existing file, you want to rename the old file by appending "_backup" before saving the new file. Which approach should you use?|Use the renameTo() method to rename the existing file: 1 2 3 4 File existingFile = new File("userfile.txt"); File backupFile = new File("userfile_backup.txt"); existingFile.renameTo(backupFile);
You are developing an application that processes customer orders. Sometimes, the orders contain invalid data (for example, negative quantities or missing customer information). Below is a code snippet for processing an order. 1 2 3 4 5 6 7 8 9 10 11 12 13 public class OrderProcessing { public static void main(String[] args) { int quantity = -5; String customerName = ""; // TODO: Validate the data and handle any exceptions that may occur processOrder(quantity, customerName); } private static void processOrder(int quantity, String customerName) { // Process the order } } What approach should you take to handle potential issues with invalid data?|Combine validation and exception handling to ensure robust processing: 1 2 3 4 5 6 7 8 if (quantity <= 0 || customerName == null || customerName.isEmpty()) { throw new IllegalArgumentException("Invalid order data"); } try { processOrder(quantity, customerName); } catch (Exception e) { System.out.println("An unexpected error occurred: " + e.getMessage()); }
Which Java class would you use to write character data to a file?|FileWriter
The following code attempts to read a file, but it does not currently handle the potential FileNotFoundException. Complete the code snippet below to handle this exception properly: 1 2 3 4 5 6 7 8 9 10 import java.io.*; public class FileReadExample { public static void main(String[] args) { FileReader reader = new FileReader("nonexistentfile.txt"); BufferedReader bufferedReader = new BufferedReader(reader); // Process the file } }|Wrap the file reading code in a try-catch block and catch FileNotFoundException: 1 2 3 4 5 6 7 8 try { FileReader reader = new FileReader("nonexistentfile.txt"); BufferedReader bufferedReader = new BufferedReader(reader); // Process the file } catch (FileNotFoundException e) { System.out.println("File not found: " + e.getMessage()); }
Which of the following methods from the File class is used to create a new directory in Java?|mkDir()
Complete the following code that serializes a User object to a file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import java.io.FileOutputStream; import java.io.ObjectOutputStream; import java.io.Serializable; class User implements Serializable { private String name; private int age; User(String name, int age) { this.name = name; this.age = age; } } public class SerializeExample { public static void main(String[] args) { User user = new User("Alice", 30); try (FileOutputStream fileOut = new FileOutputStream("user.ser"); ObjectOutputStream out = new ObjectOutputStream(fileOut)) { // Complete the code to serialize the user object } catch (Exception e) { e.printStackTrace(); } } }|out.writeObject(user);
Complete the implementation of the area() method in the Circle subclass below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract class Shape { abstract double area(); } class Circle extends Shape { private double radius; Circle(double radius) { this.radius = radius; } @Override double area() { // Your code here } }|return 3.14 * radius * radius;
You are designing a class hierarchy for a car rental system. The system should represent different cars, and each car should have an engine. Which of the following code snippets best establishes a "has-a" relationship?|1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Engine { String type; int horsepower; } class Car { String model; String make; Engine engine; Car(String model, String make, Engine engine) { this.model = model; this.make = make; this.engine = engine; } }
What is the primary role of the catch block in a try-catch structure?|To catch and handle specific exceptions.
The code snippet below attempts to parse an integer from a string. 1 2 3 4 5 6 7 public class ParseExample { public static void main(String[] args) { String number = "abc"; int result = Integer.parseInt(number); // This might throw NumberFormatException System.out.println(result); } } Fix the code to handle the potential NumberFormatException.|Add a try-catch block to handle NumberFormatException.
Choose the correct option for implementing the area method in the given Triangle class: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 abstract class Shape { abstract double area(); } class Triangle extends Shape { private double base; private double height; Triangle(double base, double height) { this.base = base; this.height = height; } @Override double area() { // Your code here } }|return 0.5 * base * height;
Which File class method can be used to list all files and directories in a specific directory?|listFiles()
Complete the following code to append data correctly to a file using FileWriter: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import java.io.FileWriter; import java.io.IOException; public class AppendToFileExample { public static void main(String[] args) { try { // Open the file in append mode FileWriter writer = new FileWriter("log.txt", true); writer.write("Appended line\n"); // Complete the code to ensure data is written and resources are properly managed } catch (IOException e) { e.printStackTrace(); } } }|writer.close();
