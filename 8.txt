You are developing a software system for a geometry application. You decide to use an abstract class Shape that will be extended by Rectangle and Triangle. The Shape class should include an abstract method calculateArea(). Which of the given options is correct about the following design? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 abstract class Shape { abstract double calculateArea(); } class Rectangle extends Shape { private double width; private double height; Rectangle(double width, double height) { this.width = width; this.height = height; } @Override double calculateArea() { return width * height; } } class Triangle extends Shape { private double base; private double height; Triangle(double base, double height) { this.base = base; this.height = height; } @Override double calculateArea() { return 0.5 * base * height; } }|The design correctly uses an abstract class and method implementation.
You are tasked with developing a notification system for an application. Different types of notifications, such as email, SMS, and push must implement a Notification interface, as demonstrated by this design: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 interface Notification { void sendNotification(String message); } class EmailNotification implements Notification { @Override public void sendNotification(String message) { // Logic to send email notification } } class SMSNotification implements Notification { @Override public void sendNotification(String message) { // Logic to send SMS notification } } class PushNotification implements Notification { @Override public void sendNotification(String message) { // Logic to send push notification } } Which of the following statements about the given design is correct?|The design correctly uses the Notification interface to handle different types of notifications.
In object-oriented design, which of the following best describes an "is-a" relationship?|A class inherits from another class.
You are developing a file processing system that reads from a file and processes the data. There is a risk of the file not being found or the data being invalid. Examine the following code snippet: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class FileProcessor { public static void main(String[] args) { try { BufferedReader reader = new BufferedReader(new FileReader("data.txt")); String line; while ((line = reader.readLine()) != null) { processLine(line); } reader.close(); } catch (FileNotFoundException e) { System.out.println("File not found: " + e.getMessage()); } catch (IOException e) { System.out.println("Error reading file: " + e.getMessage()); } } private static void processLine(String line) { // Process the line } } Which of the following is correct about the given code snippet?|This code correctly handles potential file-related exceptions.
You are developing an application that processes customer orders. Sometimes, the orders contain invalid data (for example, negative quantities or missing customer information). Below is a code snippet for processing an order. 1 2 3 4 5 6 7 8 9 10 11 12 13 public class OrderProcessing { public static void main(String[] args) { int quantity = -5; String customerName = ""; // TODO: Validate the data and handle any exceptions that may occur processOrder(quantity, customerName); } private static void processOrder(int quantity, String customerName) { // Process the order } } What approach should you take to handle potential issues with invalid data?|Combine validation and exception handling to ensure robust processing: 1 2 3 4 5 6 7 8 if (quantity <= 0 || customerName == null || customerName.isEmpty()) { throw new IllegalArgumentException("Invalid order data"); } try { processOrder(quantity, customerName); } catch (Exception e) { System.out.println("An unexpected error occurred: " + e.getMessage()); }
You are developing a software system for a construction company. You decide to use an abstract class Building that will be extended by House and Skyscraper. The Building class should include an abstract method calculateArea(). Which of the following design approaches is correct?|Define Building as an abstract class and declare calculateArea() as an abstract method, ensuring House and Skyscraper override calculateArea(): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 abstract class Building { abstract double calculateArea(); } class House extends Building { @Override double calculateArea() { // method body } } class Skyscraper extends Building { @Override double calculateArea() { // method body } }
Which Java class is commonly used to read character data from a text file?|FileReader
Complete the code snippet below to properly write data to a file using FileWriter and PrintWriter: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import java.io.*; public class FileWriteExample { public static void main(String[] args) { try { FileWriter fileWriter = new FileWriter("output.txt"); PrintWriter writer = new PrintWriter(fileWriter); // Complete the code writer.close(); } catch (IOException e) { e.printStackTrace(); } } }|writer.println("Hello, World!");
Which of the following statements about byte streams and/or character streams in Java is correct?|Byte streams are used for binary data, while character streams are used for text-based data.
Which of the following exceptions is a checked exception in Java?|IOException
Complete the code to create a new directory named "NewFolder" using the File class: 1 2 3 4 5 6 7 8 9 import java.io.File; public class DirectoryExample { public static void main(String[] args) { File dir = new File("NewFolder"); // Complete the code } }|dir.mkdir();
Which method from the File class is used to rename a file in Java?|renameTo()
Which of the following is the correct way to open a file in append mode using FileWriter in Java?|new FileWriter("filename.txt", true)
You are developing a file management tool that needs to display all files and directories in a specific folder. The tool should only list files that are not hidden. Which approach would you take?|Use the listFiles() method and manually check each file to see if it is hidden: 1 2 3 4 5 6 7 8 9 10 File directory = new File("myDirectory"); File[] files = directory.listFiles(); if (files != null) { for (File file : files) { if (!file.isHidden()) { System.out.println(file.getName()); } } }
You are developing a simple game where you need to save the player's score to a file so that it can be loaded the next time the game is played. Which approach would you use to save and load the player's score?|Save the score to a text file and read it back as a string: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int score = 42; // Saving the score try (FileWriter writer = new FileWriter("score.txt")) { writer.write(Integer.toString(score)); } catch (IOException e) { e.printStackTrace(); } // Loading the score try (BufferedReader reader = new BufferedReader(new FileReader("score.txt"))) { int loadedScore = Integer.parseInt(reader.readLine()); } catch (IOException e) { e.printStackTrace(); }
The following code is intended to print the length of the String data. However, it will cause an exception at runtime. What is the issue, and how can it be resolved? 1 2 3 4 5 6 public class ExceptionExample { public static void main(String[] args) { String data = null; System.out.println(data.length()); } }|The code will throw a NullPointerException because the data is null. Add a null check before accessing data.length().
Which of the following best describes unchecked exceptions in Java?|They are not checked at compile-time.
You are tasked with developing a log processing system that reads log files and processes each line. The system should use BufferedReader to read from a log file stored as a text file and print each line. Which of the following design approaches is correct?|Use BufferedReader to read each line, checking for null values: 1 2 3 4 5 6 7 8 9 10 11 12 try { FileReader fileReader = new FileReader("logs.txt"); BufferedReader reader = new BufferedReader(fileReader); String line; while ((line = reader.readLine()) != null) { System.out.println(line); } reader.close(); } catch (IOException e) { e.printStackTrace(); }
You are developing a program to process image files stored in binary format. The program needs to read and process the binary data. Which of the following design approaches correctly implements this requirement?|Use FileInputStream to read the binary data: 1 2 3 4 5 6 7 8 9 10 11 try { FileInputStream fis = new FileInputStream("image.dat"); int byteData; while ((byteData = fis.read()) != -1) { // Process each byte of data } fis.close(); } catch (IOException e) { e.printStackTrace(); }
Complete the code to rename a file using the File class in Java: 1 2 3 4 5 6 7 8 9 10 import java.io.File; public class RenameFileExample { public static void main(String[] args) { File oldFile = new File("oldname.txt"); File newFile = new File("newname.txt"); // Complete the code to rename the file } }|oldFile.renameTo(newFile);
You are developing a logging system for an application that needs to append log entries to a text file every time an event occurs. Which approach is the most appropriate for this task?|Use FileWriter in append mode to add each log entry to the file: 1 2 3 4 5 6 try (FileWriter writer = new FileWriter("logs.txt", true)) { writer.write("Log entry at " + new java.util.Date() + "\n"); } catch (IOException e) { e.printStackTrace(); }
